-- Q1: Number of hours each employee worked per week
SELECT
    EMPLOYEE.EMP_ID,
    EMPLOYEE.EMP_FNAME + ' ' + EMPLOYEE.EMP_LNAME AS EMP_NAME,
    YEAR(SCHEDULE.SCH_DATE) AS YEAR,
    DATEPART(WEEK, SCHEDULE.SCH_DATE) AS WEEK,
    CASE
        WHEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) BETWEEN -24 AND -12
        THEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) + 24
		WHEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) BETWEEN -12 AND 0
		THEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) + 24
        ELSE SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0)
    END AS HOURS_WORKED
FROM
    EMPLOYEE
    INNER JOIN SHIFT ON EMPLOYEE.EMP_ID = SHIFT.EMP_ID
    INNER JOIN SCHEDULE ON SHIFT.SCH_ID = SCHEDULE.SCH_ID
GROUP BY
    EMPLOYEE.EMP_ID,
    EMPLOYEE.EMP_FNAME,
    EMPLOYEE.EMP_LNAME,
    YEAR(SCHEDULE.SCH_DATE),
    DATEPART(WEEK, SCHEDULE.SCH_DATE);

-- Q2: Number of labor hours last week
SELECT
    EMPLOYEE.EMP_ID,
    EMPLOYEE.EMP_FNAME + ' ' + EMPLOYEE.EMP_LNAME AS EMP_NAME,
    YEAR(DATEADD(WEEK, -1, SCHEDULE.SCH_DATE)) AS YEAR,
    DATEPART(WEEK, DATEADD(WEEK, -1, SCHEDULE.SCH_DATE)) AS WEEK,
    CASE
        WHEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) BETWEEN -24 AND -12
        THEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) + 24
        WHEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) BETWEEN -12 AND 0
        THEN SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0) + 12
        ELSE SUM(DATEDIFF(MINUTE, SHIFT.SHIFT_START, CASE WHEN SHIFT.SHIFT_END < SHIFT.SHIFT_START THEN DATEADD(HOUR, 24, SHIFT.SHIFT_END) ELSE SHIFT.SHIFT_END END) / 60.0)
    END AS HOURS_WORKED
FROM
    EMPLOYEE
    INNER JOIN SHIFT ON EMPLOYEE.EMP_ID = SHIFT.EMP_ID
    INNER JOIN SCHEDULE ON SHIFT.SCH_ID = SCHEDULE.SCH_ID
WHERE
    SCHEDULE.SCH_DATE BETWEEN DATEADD(WEEK, -2, GETDATE()) AND DATEADD(WEEK, -1, GETDATE())
GROUP BY
    EMPLOYEE.EMP_ID,
    EMPLOYEE.EMP_FNAME,
    EMPLOYEE.EMP_LNAME,
    YEAR(DATEADD(WEEK, -1, SCHEDULE.SCH_DATE)),
    DATEPART(WEEK, DATEADD(WEEK, -1, SCHEDULE.SCH_DATE));

-- Q3: List of which employees worked breaker shifts in the last month.


-- Q4: How many breaker shifts are scheduled this week?

-- Q5: How many Slot Attendants are scheduled today?
SELECT COUNT(*) AS NUM_OF_SLOT_ATTENDANTS_TODAY FROM EMPLOYEE
INNER JOIN SCHEDULE ON SCHEDULE.EMP_ID = EMPLOYEE.EMP_ID
INNER JOIN EMPLOYEE_ROLE ON EMPLOYEE_ROLE.ROLE_CODE = EMPLOYEE.ROLE_CODE
WHERE ROLE_TITLE = 'Slot Attendance' AND SCHEDULE.SCH_DATE = CAST(GETDATE() AS DATE);

-- Q6: Any Slot Attendants who have not been assigned to Section NORTH in the last month
SELECT e.EMP_FNAME, e.EMP_LNAME, s.SCH_DATE, e.ROLE_CODE, e.EMP_ID, sh.SECT_CODE
FROM EMPLOYEE e
LEFT JOIN SCHEDULE s ON e.EMP_ID = s.EMP_ID
LEFT JOIN SHIFT sh ON sh.SCH_ID = s.SCH_ID
LEFT JOIN SECTION sec ON sec.SECT_CODE = sh.SECT_CODE
WHERE e.ROLE_CODE = 4
AND (s.SCH_DATE IS NULL OR s.SCH_DATE >= GETDATE() OR s.SCH_DATE <= GETDATE())
AND e.EMP_ID NOT IN (
    SELECT s1.EMP_ID
    FROM SCHEDULE s1
    LEFT JOIN SHIFT sh1 ON sh1.SCH_ID = s1.SCH_ID
    WHERE sh1.SECT_CODE = 1
    AND s1.SCH_DATE BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE()
);

-- Q7: Number of active Written Warning (WW) employee A has?
-- For this question we have specified the employee with EMP_ID 10
-- If there is no active WW for the employee, no table will be generated
SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME, COUNT(WRITTEN_WARNING.WW_ID) AS NUM_OF_ACTIVE_WRITTEN_WARNINGS
FROM EMPLOYEE
INNER JOIN WRITTEN_WARNING
ON EMPLOYEE.EMP_ID = WRITTEN_WARNING.EMP_ID
--Change the line below to choose a different employee--
WHERE EMPLOYEE.EMP_ID = 3 AND WRITTEN_WARNING.WW_DATE >= DATEADD(YEAR, -1, GETDATE())
GROUP BY EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME;

-- Q8: List of active WW sorted by date and employee
SELECT EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME, WRITTEN_WARNING.*
FROM EMPLOYEE
INNER JOIN WRITTEN_WARNING
ON EMPLOYEE.EMP_ID = WRITTEN_WARNING.EMP_ID
WHERE WRITTEN_WARNING.WW_DATE >= DATEADD(YEAR, -1, GETDATE())
ORDER BY WRITTEN_WARNING.WW_DATE, EMPLOYEE.EMP_LNAME;

-- Q9: A list of an employee's discipline/performance actions
-- Note that the EMP_ID can be changed to any number from 1 to 15.
SELECT * FROM WRITTEN_WARNING WHERE EMP_ID = 2;

-- Q10: Number of sick days an employee has available
SELECT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_SICK_DAYS_ENTITLEMENT - COUNT(LEAVE.LEAVE_ID) AS SICK_DAYS_AVAILABLE
FROM EMPLOYEE LEFT JOIN LEAVE ON EMPLOYEE.EMP_ID = LEAVE.EMP_ID AND LEAVE.LEAVE_TYPE = 'Sick'
GROUP BY EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_SICK_DAYS_ENTITLEMENT;

-- Q11: Number of vacation days an employee has available
SELECT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_SICK_DAYS_ENTITLEMENT - COUNT(LEAVE.LEAVE_ID) AS VACATION_DAYS_AVAILABLE
FROM EMPLOYEE LEFT JOIN LEAVE ON EMPLOYEE.EMP_ID = LEAVE.EMP_ID AND LEAVE.LEAVE_TYPE = 'Vacation'
GROUP BY EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME, EMPLOYEE.EMP_SICK_DAYS_ENTITLEMENT;

-- Q12: Statistics on Employees: Number of Female/Male employees, Average age of employees? Number of employees over 50? Under 30
SELECT SUM(CASE WHEN DATEDIFF(YEAR, EMP_DOB, GETDATE()) > 50 THEN 1 ELSE 0 END) AS EMPLOYEES_OVER_50,
       SUM(CASE WHEN DATEDIFF(YEAR, EMP_DOB, GETDATE()) < 30 THEN 1 ELSE 0 END) AS EMPLOYEES_UNDER_30,
       EMP_GENDER, AVG(DATEDIFF(year, EMP_DOB, GETDATE())) AS AVG_AGE
FROM EMPLOYEE GROUP BY EMP_GENDER;

-- Q13: List of employees who has the mandatory certification expiring in the next 6 weeks
SELECT DISTINCT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME
FROM EMPLOYEE
INNER JOIN EMP_ROLE_CERT ON EMPLOYEE.ROLE_CODE = EMP_ROLE_CERT.ROLE_CODE
INNER JOIN CERTIFICATION ON EMP_ROLE_CERT.CERT_CODE = CERTIFICATION.CERT_CODE
WHERE DATEDIFF(WEEK, GETDATE(), CERTIFICATION.CERT_VALID_FOR) <= 6;

-- Q14: List of employees who need updated in-house training
SELECT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME
FROM EMPLOYEE
INNER JOIN EMP_TRAIN_SESSION ON EMPLOYEE.EMP_ID = EMP_TRAIN_SESSION.EMP_ID
INNER JOIN TRAINING_SESSION ON EMP_TRAIN_SESSION.TRAIN_ID = TRAINING_SESSION.TRAIN_ID
INNER JOIN CERTIFICATION ON TRAINING_SESSION.CERT_CODE = CERTIFICATION.CERT_CODE
WHERE EMP_TRAIN_SESSION.TRAIN_EXPIRY_DATE < DATEADD(YEAR, -1, GETDATE())
OR CERTIFICATION.CERT_VALID_FOR <= DATEADD(YEAR, -1, GETDATE())
OR EMP_TRAIN_SESSION.TRAIN_OUTCOME = 'Fail';

-- Q15: List of employees who have expired training
SELECT EMPLOYEE.EMP_ID, EMPLOYEE.EMP_FNAME, EMPLOYEE.EMP_LNAME
FROM EMPLOYEE
INNER JOIN EMP_TRAIN_SESSION ON EMPLOYEE.EMP_ID = EMP_TRAIN_SESSION.EMP_ID
INNER JOIN TRAINING_SESSION ON EMP_TRAIN_SESSION.TRAIN_ID = TRAINING_SESSION.TRAIN_ID
INNER JOIN CERTIFICATION ON TRAINING_SESSION.CERT_CODE = CERTIFICATION.CERT_CODE
WHERE CERTIFICATION.CERT_VALID_FOR <= DATEADD(YEAR, -1, GETDATE());

-- Q16: How many uniforms remain un-allocated?
SELECT SUM(INV_QNTY) AS 'Unallocated Uniforms'
FROM INVENTORY
LEFT JOIN SHIFT_INVENTORY ON INVENTORY.INV_ID = SHIFT_INVENTORY.INV_ID
WHERE INVENTORY.INV_TITLE = 'Uniform'
AND INVENTORY.INV_QNTY > 0
AND SHIFT_INVENTORY.INV_ID IS NULL;





